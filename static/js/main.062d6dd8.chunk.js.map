{"version":3,"sources":["DUMMY_NOTES.ts","components/Note/Note.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["DUMMY_NOTES","_id","text","link","Note","note","onNoteUpdate","className","onBlur","e","console","log","newTextValue","currentTarget","textContent","updatedNoteobject","contentEditable","suppressContentEditableWarning","href","App","useState","notesList","setNotesList","useEffect","listFromStorageString","localStorage","getItem","listFromStorageArray","JSON","parse","notesListString","stringify","setItem","updateNoteItem","updatedNote","updatedList","map","noteItem","index","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+OAceA,G,MAZc,CAC3B,CAAEC,IAAK,IAAKC,KAAM,YAAaC,KAAM,0BACrC,CAAEF,IAAK,IAAKC,KAAM,YAAaC,KAAM,yBACrC,CAAEF,IAAK,IAAKC,KAAM,YAAaC,KAAM,0BACrC,CAAEF,IAAK,IAAKC,KAAM,YAAaC,KAAM,yBACrC,CAAEF,IAAK,IAAKC,KAAM,YAAaC,KAAM,0BACrC,CAAEF,IAAK,IAAKC,KAAM,YAAaC,KAAM,yBACrC,CAAEF,IAAK,IAAKC,KAAM,YAAaC,KAAM,0BACrC,CAAEF,IAAK,IAAKC,KAAM,YAAaC,KAAM,yBACrC,CAAEF,IAAK,IAAKC,KAAM,YAAaC,KAAM,0BACrC,CAAEF,IAAK,KAAMC,KAAM,YAAaC,KAAM,2B,sBC8BzBC,EAhCS,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,aAe/B,OACE,sBAAKC,UAAU,OAAf,UACE,qBACEC,OAjBkB,SAACC,GACvBC,QAAQC,IAAI,oBACZ,IAAMC,EAAeH,EAAEI,cAAcC,YACrC,GAAIF,IAAiBP,EAAKH,KAA1B,CAGA,IAAMa,EAAwB,2BACzBV,GADyB,IAE5BH,KAAMU,GAAgB,KAGxBN,EAAaS,KAOTC,iBAAiB,EACjBC,gCAAgC,EAChCV,UAAU,aAJZ,SAMGF,EAAKH,OAER,qBAAKK,UAAU,aAAf,SACE,mBAAGW,KAAMb,EAAKF,KAAd,wBC2COgB,MAzEf,WAME,MAAkCC,mBAAuB,IAAzD,mBAAOC,EAAP,KAAkBC,EAAlB,KAIAC,qBAAU,WACR,IAAMC,EAAwBC,aAAaC,QAAQ,YACnD,GAAIF,EAAuB,CACzB,IAAMG,EAAuBC,KAAKC,MAAML,GACxCF,EAAaK,QAEbL,EAAatB,KAEd,IAEHuB,qBAAU,WACRb,QAAQC,IAAI,0BACZ,IAAMmB,EAAkBF,KAAKG,UAAUV,GACvCI,aAAaO,QAAQ,WAAYF,KAChC,CAACT,IAiBJX,QAAQC,IAAI,eACZD,QAAQC,IAAIU,GAEZ,IAAMY,EAAiB,SAACC,GACtBxB,QAAQC,IAAI,sCACZD,QAAQC,IAAIuB,GAGZ,IAAMC,EAAcd,EAAUe,KAAI,SAACC,GACjC,OAAIA,EAASpC,MAAQiC,EAAYjC,IACxBiC,EAEFG,KAETf,EAAaa,IAGf,OACE,sBAAK5B,UAAU,MAAf,UACE,qBAAKA,UAAU,UAAf,+BACA,wBACA,qBAAKA,UAAU,aAAf,SACGc,EAAUe,KAAI,SAACC,EAAUC,GACxB,OACE,cAAC,EAAD,CAAMjC,KAAMgC,EAAU/B,aAAc2B,GAAqBK,YCzDtDC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.062d6dd8.chunk.js","sourcesContent":["import INote from \"./interfaces/note.interface\";\r\n\r\nconst DUMMY_NOTES: INote[] = [\r\n  { _id: \"1\", text: \"Test note\", link: \"https://www.twitch.tv/\" },\r\n  { _id: \"2\", text: \"Get a Job\", link: \"https://www.rozee.pk/\" },\r\n  { _id: \"3\", text: \"Test note\", link: \"https://www.twitch.tv/\" },\r\n  { _id: \"4\", text: \"Get a Job\", link: \"https://www.rozee.pk/\" },\r\n  { _id: \"5\", text: \"Test note\", link: \"https://www.twitch.tv/\" },\r\n  { _id: \"6\", text: \"Get a Job\", link: \"https://www.rozee.pk/\" },\r\n  { _id: \"7\", text: \"Test note\", link: \"https://www.twitch.tv/\" },\r\n  { _id: \"8\", text: \"Get a Job\", link: \"https://www.rozee.pk/\" },\r\n  { _id: \"9\", text: \"Test note\", link: \"https://www.twitch.tv/\" },\r\n  { _id: \"10\", text: \"Get a Job\", link: \"https://www.rozee.pk/\" },\r\n];\r\nexport default DUMMY_NOTES;\r\n","import { FC, FocusEvent } from \"react\"; // Importing Functional Component and it used to define type\r\nimport INote from \"../../interfaces/note.interface\";\r\nimport \"./Note.css\";\r\n\r\ntype Props = {\r\n  note: INote;\r\n  onNoteUpdate: (note: INote) => void;\r\n  //   onNoteUpdate: Function;\r\n};\r\n\r\nconst Note: FC<Props> = ({ note, onNoteUpdate }) => {\r\n  const noteTextUpdated = (e: FocusEvent<HTMLDivElement>) => {\r\n    console.log(\"note text change\");\r\n    const newTextValue = e.currentTarget.textContent;\r\n    if (newTextValue === note.text) {\r\n      return;\r\n    }\r\n    const updatedNoteobject: INote = {\r\n      ...note,\r\n      text: newTextValue || \"\",\r\n    };\r\n    // console.log(e.currentTarget.textContent);\r\n    onNoteUpdate(updatedNoteobject);\r\n  };\r\n\r\n  return (\r\n    <div className=\"note\">\r\n      <div\r\n        onBlur={noteTextUpdated}\r\n        contentEditable={true}\r\n        suppressContentEditableWarning={true}\r\n        className=\"note__text\"\r\n      >\r\n        {note.text}\r\n      </div>\r\n      <div className=\"note__link\">\r\n        <a href={note.link}>link</a>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Note;\r\n","import \"./App.css\";\nimport { useEffect, useState } from \"react\";\nimport DUMMY_NOTES from \"./DUMMY_NOTES\";\nimport Note from \"./components/Note/Note\";\nimport INote from \"./interfaces/note.interface\";\n\nfunction App() {\n  // const getNotes = () =>{\n  //   console.log('we are awesome')\n  // }\n  // let notesList: any[] = []; //note list variable\n\n  const [notesList, setNotesList] = useState<Array<INote>>([]);\n  // const [notesList, setNotesList] = useState<any[]>([]);\n\n  // App components renders first time\n  useEffect(() => {\n    const listFromStorageString = localStorage.getItem(\"my-notes\");\n    if (listFromStorageString) {\n      const listFromStorageArray = JSON.parse(listFromStorageString);\n      setNotesList(listFromStorageArray);\n    } else {\n      setNotesList(DUMMY_NOTES);\n    }\n  }, []);\n\n  useEffect(() => {\n    console.log(\"saving to localstorage\");\n    const notesListString = JSON.stringify(notesList);\n    localStorage.setItem(\"my-notes\", notesListString);\n  }, [notesList]);\n\n  // useEffect(() => {\n  //   console.log(\"noteList list value changed\");\n  //   console.log(notesList);\n  // }, [notesList]);\n\n  // get notes method\n  // async function getNotes() {\n  //   try {\n  //     const response = await axios.get(\"http://localhost:5000/notes\");\n  //     // noteslist = response.data.notes;\n  //     setNotesList(response.data.notes);\n  //   } catch (error) {\n  //     console.error(error);\n  //   }\n  // }\n  console.log(\"rerendering\");\n  console.log(notesList);\n\n  const updateNoteItem = (updatedNote: INote) => {\n    console.log(\"value updated in the app component\");\n    console.log(updatedNote);\n\n    // temporary variable\n    const updatedList = notesList.map((noteItem: INote) => {\n      if (noteItem._id === updatedNote._id) {\n        return updatedNote;\n      }\n      return noteItem;\n    });\n    setNotesList(updatedList); // updating the state of notes list\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"t1-main\">Notes Application</div>\n      <div></div>\n      <div className=\"notes-list\">\n        {notesList.map((noteItem, index) => {\n          return (\n            <Note note={noteItem} onNoteUpdate={updateNoteItem} key={index} />\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
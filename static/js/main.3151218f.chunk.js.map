{"version":3,"sources":["constants/api.ts","services/notesService.ts","components/Note/Note.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["NOTES_API_URL","process","getNotes","a","axios","get","response","data","notes","console","error","createNote","newNote","post","note","log","deleteNote","noteToDeleteId","url","delete","reply","updateNote","noteToUpdate","_id","put","updatedNote","pinnedNote","noteToPinId","Note","onNoteUpdate","onNoteDelete","toggleHandler","isPinned","useState","isFocused","setIsFocused","pinned","className","target","rel","href","link","icon","faLink","onClick","faPencilAlt","faThumbtack","type","onBlur","e","newTextValue","currentTarget","textContent","text","updatedNoteobject","onFocus","contentEditable","suppressContentEditableWarning","App","ModalNotes","notesList","setNotesList","ShowAddModal","setShowAddModal","Add","modalNote","setModalNote","handleCloseAddModal","setNewNote","handleShowUpdateModal","Edit","useEffect","getNotesFromServer","sortNotesList","sort","noteItem","updateNoteItem","noteFromServer","updatedList","map","addNote","savedNote","editNote","deleteNoteItem","noteToDelete","remainingNotes","filter","pinnedItem","notePinned","updatedPinList","Button","variant","Modal","show","onHide","Header","closeButton","Title","Body","FloatingLabel","controlId","label","Form","Control","onChange","event","NewVal","value","as","placeholder","style","height","Footer","index","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3151218f.chunk.js","sourcesContent":["export const API_BASE_URL = process.env.REACT_APP_BACKEND;\r\n\r\nexport const NOTES_API_URL = `${API_BASE_URL}/notes`;\r\n","import axios from \"axios\";\r\nimport { NOTES_API_URL } from \"../constants/api\";\r\nimport INote from \"../interfaces/note.interface\";\r\n\r\nexport const getNotes = async () => {\r\n  try {\r\n    const response = await axios.get(NOTES_API_URL);\r\n    return response.data.notes;\r\n  } catch (error) {\r\n    console.error(error);\r\n  }\r\n};\r\n\r\nexport const createNote = async (newNote: Partial<INote>) => {\r\n  try {\r\n    const response = await axios.post(NOTES_API_URL, newNote);\r\n\r\n    return response.data.note;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const deleteNote = async (noteToDeleteId: string) => {\r\n  try {\r\n    const url = `${NOTES_API_URL}/${noteToDeleteId}`;\r\n    const response = await axios.delete(url);\r\n    return response.data.reply;\r\n  } catch (error) {\r\n    console.error(error);\r\n  }\r\n};\r\n\r\nexport const updateNote = async (noteToUpdate: INote) => {\r\n  try {\r\n    const url = `${NOTES_API_URL}/${noteToUpdate._id}`;\r\n    const response = await axios.put(url, noteToUpdate);\r\n    return response.data.updatedNote;\r\n  } catch (error) {\r\n    console.error(error);\r\n  }\r\n};\r\n\r\nexport const pinnedNote = async (noteToPinId: INote) => {\r\n  try {\r\n    const url = `${NOTES_API_URL}/${noteToPinId._id}`;\r\n    const response = await axios.put(url, noteToPinId);\r\n    return response.data.updatedNote;\r\n  } catch (error) {\r\n    console.error(error);\r\n  }\r\n};\r\n","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faLink,\r\n  faPencilAlt,\r\n  faThumbtack,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FC, FocusEvent, useState } from \"react\"; // Importing Functional Component and it used to define type\r\nimport INote from \"../../interfaces/note.interface\";\r\nimport \"./Note.css\";\r\n\r\ntype Props = {\r\n  note: INote;\r\n  onNoteUpdate: (note: INote) => void;\r\n  onNoteDelete: (note: INote) => void;\r\n  toggleHandler: (note: INote) => void;\r\n  isPinned: (note: INote) => void;\r\n  //   onNoteUpdate: Function;\r\n};\r\n\r\nconst Note: FC<Props> = ({\r\n  note,\r\n  onNoteUpdate,\r\n  onNoteDelete,\r\n  toggleHandler,\r\n  isPinned,\r\n}) => {\r\n  const [isFocused, setIsFocused] = useState(false);\r\n\r\n  const pinnedNote: INote = {\r\n    ...note,\r\n    pinned: !note.pinned,\r\n  };\r\n\r\n  // What the heck was this, it was updating pin whatever I do update it\r\n\r\n  // const pinnedNote = (note = {\r\n  //   ...note,\r\n  //   pinned: !note.pinned,\r\n  // });\r\n\r\n  const noteTextUpdated = (e: FocusEvent<HTMLDivElement>) => {\r\n    setIsFocused(false);\r\n    // console.log(\"note text change\");\r\n    const newTextValue = e.currentTarget.textContent;\r\n    if (newTextValue === note.text) {\r\n      return;\r\n    }\r\n    const updatedNoteobject: INote = {\r\n      ...note,\r\n      text: newTextValue || \"\",\r\n    };\r\n    // console.log(e.currentTarget.textContent);\r\n    onNoteUpdate(updatedNoteobject);\r\n  };\r\n\r\n  return (\r\n    <div className={isFocused ? \"note note--focused\" : \"note\"}>\r\n      <div className=\"note__tools\">\r\n        <a className=\"link\" target=\"_blank\" rel=\"noreferrer\" href={note.link}>\r\n          <FontAwesomeIcon icon={faLink} />\r\n        </a>\r\n        <button\r\n          onClick={() => {\r\n            toggleHandler(note);\r\n          }}\r\n        >\r\n          <FontAwesomeIcon icon={faPencilAlt} />\r\n        </button>\r\n      </div>\r\n      <button\r\n        onClick={() => {\r\n          isPinned(pinnedNote);\r\n        }}\r\n        className={note.pinned ? \"note__pin note__pinned\" : \"note__pin\"}\r\n      >\r\n        <FontAwesomeIcon icon={faThumbtack} />\r\n      </button>\r\n      <button\r\n        onClick={() => {\r\n          onNoteDelete(note);\r\n        }}\r\n        type=\"button\"\r\n        className=\"btn-close\"\r\n        aria-label=\"Close\"\r\n      ></button>\r\n      <div\r\n        onBlur={noteTextUpdated}\r\n        onFocus={() => {\r\n          setIsFocused(true);\r\n        }}\r\n        contentEditable={true}\r\n        suppressContentEditableWarning={true}\r\n        className=\"note__text\"\r\n      >\r\n        {note.text}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Note;\r\n","import \"./App.css\";\r\nimport { useEffect, useState } from \"react\";\r\nimport {\r\n  deleteNote,\r\n  createNote,\r\n  getNotes,\r\n  updateNote,\r\n  pinnedNote,\r\n} from \"./services/notesService\";\r\n// import DUMMY_NOTES from \"./DUMMY_NOTES\";\r\nimport Note from \"./components/Note/Note\";\r\nimport INote from \"./interfaces/note.interface\";\r\nimport { Button, FloatingLabel, Form, Modal } from \"react-bootstrap\";\r\n\r\nfunction App() {\r\n  // const getNotes = () =>{\r\n  //   console.log('we are awesome')\r\n  // }\r\n  // let notesList: any[] = []; //note list variable\r\n  enum ModalNotes {\r\n    Add,\r\n    Edit,\r\n  }\r\n  const [notesList, setNotesList] = useState<Array<INote>>([]);\r\n  const [ShowAddModal, setShowAddModal] = useState(false);\r\n  const [modalNote, setModalNote] = useState(ModalNotes.Add);\r\n  // const [ShowUpdateModal, setShowUpdateModal] = useState(false);\r\n  const handleCloseAddModal = () => {\r\n    setNewNote({\r\n      link: \"\",\r\n      text: \"\",\r\n      pinned: false,\r\n    });\r\n    setShowAddModal(false);\r\n  };\r\n  const handleShowAddModal = () => {\r\n    setModalNote(ModalNotes.Add);\r\n    setShowAddModal(true);\r\n  };\r\n\r\n  const handleShowUpdateModal = (note: INote) => {\r\n    setNewNote(note);\r\n    setModalNote(ModalNotes.Edit);\r\n    setShowAddModal(true);\r\n    // updateNoteItem(newNote as INote);\r\n    // updateNoteItem(note);\r\n  };\r\n\r\n  // const handleCloseUpdateModal = () => setShowUpdateModal(false);\r\n\r\n  const [newNote, setNewNote] = useState<Partial<INote>>({\r\n    link: \"\",\r\n    text: \"\",\r\n    pinned: false,\r\n  });\r\n  // const [notesList, setNotesList] = useState<any[]>([]);\r\n\r\n  // App components renders first time get items from local storage\r\n  // useEffect(() => {\r\n  //   const listFromStorageString = localStorage.getItem(\"my-notes\");\r\n  //   if (listFromStorageString) {\r\n  //     const listFromStorageArray = JSON.parse(listFromStorageString);\r\n  //     setNotesList(listFromStorageArray);\r\n  //   } else {\r\n  //     setNotesList(DUMMY_NOTES);\r\n  //   }\r\n  // }, []);\r\n  useEffect(() => {\r\n    getNotesFromServer();\r\n  }, []);\r\n\r\n  const getNotesFromServer = async () => {\r\n    const notes = await getNotes();\r\n    // console.log(notes[0].pinned);\r\n    const sortNotesList = notes.sort((noteItem: INote) => {\r\n      return noteItem.pinned ? -1 : 1;\r\n    });\r\n    setNotesList(sortNotesList);\r\n  };\r\n\r\n  // useEffect(() => {\r\n  //   console.log(\"saving to localstorage\");\r\n  //   const notesListString = JSON.stringify(notesList);\r\n  //   localStorage.setItem(\"my-notes\", notesListString);\r\n  // }, [notesList]);\r\n\r\n  // useEffect(() => {\r\n  //   console.log(\"noteList list value changed\");\r\n  //   console.log(notesList);\r\n  // }, [notesList]);\r\n\r\n  // get notes method\r\n  // async function getNotes() {\r\n  //   try {\r\n  //     const response = await axios.get(\"http://localhost:5000/notes\");\r\n  //     // noteslist = response.data.notes;\r\n  //     setNotesList(response.data.notes);\r\n  //   } catch (error) {\r\n  //     console.error(error);\r\n  //   }\r\n  // }\r\n  // console.log(\"rerendering\");\r\n  // console.log(notesList);\r\n\r\n  const updateNoteItem = async (updatedNote: INote) => {\r\n    const noteFromServer = await updateNote(updatedNote);\r\n    // temporary variable\r\n    const updatedList = notesList.map((noteItem: INote) => {\r\n      if (noteItem._id === noteFromServer._id) {\r\n        return noteFromServer;\r\n      }\r\n      return noteItem;\r\n    });\r\n    setNotesList(updatedList); // updating the state of notes list\r\n  };\r\n\r\n  const addNote = async () => {\r\n    const savedNote = await createNote(newNote);\r\n    setNotesList([...notesList, savedNote]);\r\n    handleCloseAddModal();\r\n  };\r\n\r\n  const editNote = async () => {\r\n    updateNoteItem(newNote as INote);\r\n    setShowAddModal(false);\r\n  };\r\n\r\n  const deleteNoteItem = async (noteToDelete: INote) => {\r\n    await deleteNote(noteToDelete._id);\r\n    const remainingNotes = notesList.filter((noteItem) => {\r\n      return noteItem._id !== noteToDelete._id;\r\n    });\r\n    setNotesList(remainingNotes);\r\n  };\r\n\r\n  const pinnedItem = async (pinned: INote) => {\r\n    const notePinned = await pinnedNote(pinned);\r\n    const updatedPinList = notesList.map((noteItem: INote) => {\r\n      if (noteItem._id === notePinned._id) {\r\n        return notePinned;\r\n      }\r\n      return noteItem;\r\n    });\r\n    const sortNotesList = updatedPinList.sort((noteItem: INote) => {\r\n      return noteItem.pinned ? -1 : 1;\r\n    });\r\n    setNotesList(sortNotesList);\r\n    // console.log(notePin);\r\n    // const updatedList = notesList.map((noteItem: INote) => {\r\n    //   if (noteItem._id === notePin._id) {\r\n    //     return !noteItem.pinned;\r\n    //   }\r\n    //   return noteItem;\r\n    // });\r\n    // const noteId = note._id;\r\n    // const updatedList = notesList.map((noteItem: INote) => {\r\n    //   if (noteItem._id === noteFromServer._id) {\r\n    //     return noteFromServer;\r\n    //   }\r\n    //   return noteItem;\r\n    // });\r\n\r\n    // console.log(remainingNotes);\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"t1-main\">Notes Application</div>\r\n      <Button\r\n        variant=\"dark\"\r\n        className=\"add-button\"\r\n        onClick={handleShowAddModal}\r\n      >\r\n        +\r\n      </Button>\r\n\r\n      <Modal show={ShowAddModal} onHide={handleCloseAddModal}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>\r\n            {modalNote === ModalNotes.Add ? \"Add\" : \"Edit\"} Note\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <FloatingLabel controlId=\"floatingTextarea2\" label=\"Text\">\r\n            <Form.Control\r\n              onChange={(event) => {\r\n                const NewVal = event.currentTarget.value;\r\n                setNewNote({\r\n                  ...newNote,\r\n                  text: NewVal,\r\n                });\r\n              }}\r\n              as=\"textarea\"\r\n              value={newNote.text}\r\n              placeholder=\"Leave a comment here\"\r\n              style={{ height: \"100px\" }}\r\n            />\r\n          </FloatingLabel>\r\n          <FloatingLabel\r\n            controlId=\"floatingTextarea\"\r\n            label=\"Link\"\r\n            className=\"mb-3 note-link\"\r\n          >\r\n            <Form.Control\r\n              onChange={(event) => {\r\n                const NewVal = event.currentTarget.value;\r\n                setNewNote({\r\n                  ...newNote,\r\n                  link: NewVal,\r\n                });\r\n              }}\r\n              placeholder=\"Enter note Url\"\r\n              type=\"url\"\r\n              value={newNote.link}\r\n            />\r\n          </FloatingLabel>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={handleCloseAddModal}>\r\n            Close\r\n          </Button>\r\n          <Button\r\n            variant=\"primary\"\r\n            onClick={modalNote === ModalNotes.Add ? addNote : editNote}\r\n          >\r\n            {modalNote === ModalNotes.Add ? \"Create\" : \"Update\"}\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n\r\n      {/* <Modal show={ShowUpdateModal} onHide={handleCloseUpdateModal}>\r\n          <Modal.Header closeButton>\r\n            <Modal.Title>Update Note</Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <FloatingLabel controlId=\"floatingTextarea2\" label=\"Text\">\r\n              <Form.Control\r\n                onChange={(event) => {\r\n                  const NewVal = event.currentTarget.value;\r\n                  setNewNote({\r\n                    ...newNote,\r\n                    text: NewVal,\r\n                  });\r\n                }}\r\n                value={newNote.text}\r\n                as=\"textarea\"\r\n                placeholder=\"Leave a comment here\"\r\n                style={{ height: \"100px\" }}\r\n              />\r\n            </FloatingLabel>\r\n            <FloatingLabel\r\n              controlId=\"floatingTextarea\"\r\n              label=\"Link\"\r\n              className=\"mb-3 note-link\"\r\n            >\r\n              <Form.Control\r\n                onChange={(event) => {\r\n                  const NewVal = event.currentTarget.value;\r\n                  setNewNote({\r\n                    ...newNote,\r\n                    link: NewVal,\r\n                  });\r\n                }}\r\n                value={newNote.link}\r\n                placeholder=\"Enter note Url\"\r\n                type=\"url\"\r\n              />\r\n            </FloatingLabel>\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <Button variant=\"secondary\" onClick={handleCloseUpdateModal}>\r\n              Close\r\n            </Button>\r\n            <Button variant=\"primary\" onClick={editNote}>\r\n              Update\r\n            </Button>\r\n          </Modal.Footer>\r\n        </Modal> */}\r\n      <div className=\"notes-list\">\r\n        {notesList.map((noteItem, index) => {\r\n          return (\r\n            <Note\r\n              note={noteItem}\r\n              onNoteUpdate={updateNoteItem}\r\n              onNoteDelete={deleteNoteItem}\r\n              key={index}\r\n              toggleHandler={handleShowUpdateModal}\r\n              isPinned={pinnedItem}\r\n            />\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"@fortawesome/fontawesome-svg-core/styles.css\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}